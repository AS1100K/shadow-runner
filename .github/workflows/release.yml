name: Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string
      job:
        description: 'Job to run (release-wasm, release-linux, release-windows, release-macOS, upload-to-itch)'
        required: false
        type: choice
        options:
          - all
          - release-wasm
          - release-linux
          - release-windows
          - release-macOS
          - upload-to-itch

env:
  # update with the name of the main binary
  binary: shadow-runner
  add_binaries_to_github_release: true
  # Decleared at step
  # - upload-to-itch-all
  # - upload-to-itch-only
  # 
  # itch_target: AS1100K/shadow-runner

  # Before enabling LFS, please take a look at GitHub's documentation for costs and quota limits:
  # https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage
  use_git_lfs: false


jobs:

  # Build for wasm
  release-wasm:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || inputs.job == 'all' || inputs.job == 'release-wasm' }}

    steps:
      - name: Get Tag (On Push Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version_on_push
        uses: olegtarasov/get-tag@v2.1.2
      - name: Get Tag
        id: get_version
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
          ref: ${{ steps.get_version.outputs.tag }}
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          # do not remove large-packages, as it is necessary
          large-packages: false
          docker-images: true
          swap-storage: true
      - name: Minify JSON
        uses: StefanEnsmann/Minify-JSON-Action@1.1.0
        with:
          input_file: assets/shadow_runner.ldtk
      - name: Debug output
        run: cat assets/shadow_runner.ldtk
      - uses: rs-workspace/rust-toolchain@v0.2.0
      - name: Install Rust Toolchain for WASM
        run: rustup target install wasm32-unknown-unknown
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release-wasm/${{ env.binary }}.wasm
          cp -r assets wasm/ || true # Try to copy, but ignore if it can't copy if source directory does not exist 

      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: wasm
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-wasm-${{ steps.get_version.outputs.tag }}.zip
          tag: refs/tags/${{ steps.get_version.outputs.tag }}
          overwrite: true

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || inputs.job == 'all' || inputs.job == 'release-linux' }}

    steps:
      - name: Get Tag (On Push Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version_on_push
        uses: olegtarasov/get-tag@v2.1.2
      - name: Get Tag
        id: get_version
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
          ref: ${{ steps.get_version.outputs.tag }}
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          # do not remove large-packages, as it is necessary
          large-packages: false
          docker-images: true
          swap-storage: true
      - name: Minify JSON
        uses: StefanEnsmann/Minify-JSON-Action@1.1.0
        with:
          input_file: assets/shadow_runner.ldtk
      - uses: rs-workspace/rust-toolchain@v0.2.0
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/ || true # Try to copy, but ignore if it can't copy if source directory does not exist

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: refs/tags/${{ steps.get_version.outputs.tag }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest
    if: ${{ github.event_name == 'push' || inputs.job == 'all' || inputs.job == 'release-windows' }}

    steps:
      - name: Get Tag (On Push Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version_on_push
        uses: olegtarasov/get-tag@v2.1.2
      - name: Get Tag
        id: get_version
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
          ref: ${{ steps.get_version.outputs.tag }}

      - name: Minify JSON
        uses: StefanEnsmann/Minify-JSON-Action@1.1.0
        with:
          input_file: assets/shadow_runner.ldtk

      - uses: rs-workspace/rust-toolchain@v0.2.0

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          mkdir assets -ea 0 # create the assets directory if it does not exist, it will get ignored in the zip if empty
          cp -r assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: refs/tags/${{ steps.get_version.outputs.tag }}
          overwrite: true

  # Build for MacOS x86_64
  # release-macOS-intel:
  #   runs-on: macOS-latest
  #   if: ${{ github.event_name == 'push' || inputs.job == 'all' || inputs.job == 'release-macOS-intel' }}

  #   steps:
  #     - name: Get Tag (On Push Tags)
  #       if: startsWith(github.ref, 'refs/tags/')
  #       id: get_version_on_push
  #       uses: olegtarasov/get-tag@v2.1.2
  #     - name: Get Tag
  #       id: get_version
  #       run: |
  #         if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
  #           echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
  #         else
  #           echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
  #         fi
  #     - uses: actions/checkout@v4
  #       with:
  #         lfs: ${{ env.use_git_lfs }}
  #         ref: ${{ steps.get_version.outputs.tag }}
  #     - uses: rs-workspace/rust-toolchain@v0.2.0
  #     - name: Install Rust Toolchain
  #       run: rustup target add x86_64-apple-darwin
  #     - name: Environment Setup
  #       run: |
  #         export CFLAGS="-fno-stack-check"
  #         export MACOSX_DEPLOYMENT_TARGET="10.9"

  #     - name: Build
  #       run: |
  #         cargo build --release --target x86_64-apple-darwin

  #     - name: Prepare Package
  #       run: |
  #         mkdir -p ${{ env.binary }}.app/Contents/MacOS
  #         cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
  #         cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
  #         hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-intel.dmg

  #     - name: Upload binaries to artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         path: ${{ env.binary }}-macOS-intel.dmg
  #         name: macOS-intel
  #         retention-days: 1

  #     - name: Upload binaries to release
  #       if: ${{ env.add_binaries_to_github_release == 'true' }}
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file:  ${{ env.binary }}-macOS-intel.dmg
  #         asset_name: ${{ env.binary }}-macOS-intel-${{ steps.get_version.outputs.tag }}.dmg
  #         tag: refs/tags/${{ steps.get_version.outputs.tag }}
  #         overwrite: true

  # Build for MacOS Apple Silicon
  release-macOS:
    runs-on: macOS-latest
    if: ${{ github.event_name == 'push' || inputs.job == 'all' || inputs.job == 'release-macOS' }}

    steps:
      - name: Get Tag (On Push Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version_on_push
        uses: olegtarasov/get-tag@v2.1.2
      - name: Get Tag
        id: get_version
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
          ref: ${{ steps.get_version.outputs.tag }}
      - name: Minify JSON
        uses: StefanEnsmann/Minify-JSON-Action@1.1.0
        with:
          input_file: assets/shadow_runner.ldtk
      - uses: rs-workspace/rust-toolchain@v0.2.0
      - name: Environment 
        # macOS 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="11"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
          hdiutil create -fs HFS+ -volname "${{ env.binary }}-macOS-apple-silicon" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.binary }}-macOS-apple-silicon-${{ steps.get_version.outputs.tag }}.dmg
          tag: refs/tags/${{ steps.get_version.outputs.tag }}
          overwrite: true

  upload-to-itch-configuration:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Debug Info
        run: |
          echo "inputs.job: ${{ inputs.job }} || github.event.inputs.job: ${{ github.event.inputs.job }}"
          echo "inputs.tag: ${{ inputs.tag }} || github.event.inputs.tag: ${{ github.event.inputs.tag }}"
      - name: Get Tag (On Push Tags)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version_on_push
        uses: olegtarasov/get-tag@v2.1.2
      - name: Get Tag
        id: get_version
        run: |
          if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "tag=${{ steps.get_version_on_push.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi

  upload-to-itch-all:
    if: ${{ github.event_name == 'push' || inputs.job == 'all' }}
    needs: 
      - upload-to-itch-configuration
      - release-wasm
      - release-linux
      - release-windows
      - release-macOS
      
    uses: AS1100K/shadow-runner/.github/workflows/upload-to-itch.yml@master
    with: 
      tag: ${{ needs.upload-to-itch-configuration.outputs.tag }}
      itch_target: "AS1100K/shadow-runner"
    secrets:
      butler_credentials: ${{ secrets.BUTLER_CREDENTIALS  }}

  upload-to-itch-only:
    if: ${{ inputs.job == 'upload-to-itch' }}
    needs: 
      upload-to-itch-configuration
    uses: AS1100K/shadow-runner/.github/workflows/upload-to-itch.yml@master
    with: 
      tag: ${{ needs.upload-to-itch-configuration.outputs.tag }}
      itch_target: "AS1100K/shadow-runner"
    secrets:
      butler_credentials: ${{ secrets.BUTLER_CREDENTIALS  }}